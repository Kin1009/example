#!/usr/bin/env python3
import sys
import subprocess
import json
import os
import shutil

# Function to clone a repo
def clone(url):
    print(f"Cloning repository from {url}...")
    subprocess.run(["git", "clone", url], check=True)

# Function to handle the package installation
def install_package(package):
    print(f"Installing {package}...")

    # Remove existing packages if they exist
    subprocess.run(["rm", "-rf", "packages"])
    subprocess.run(["rm", "-rf", package])

    # Clone the base package list
    clone("https://github.com/Kin1009/packages")
    
    # Load package data from packages.json
    try:
        with open('packages/packages.json') as f:
            data = json.load(f)
    except Exception as e:
        print(f"Error reading packages.json: {e}")
        return
    
    if package not in data:
        print(f"Package {package} not found in packages.json!")
        return

    # Get the package's URL and clone it
    url = data[package]
    clone(url)

    # Read package data (dependencies, mode, setup)
    try:
        with open(f'{package}/package.json') as f:
            package_data = json.load(f)
    except Exception as e:
        print(f"Error reading package.json for {package}: {e}")
        return
    
    # Install dependencies recursively
    for dep in package_data.get("dependencies", []):
        install_package(dep)

    # Handle the installation mode
    mode = package_data.get("mode", "copy")
    setup_file = package_data.get("setup", None)
    handle_mode(mode, package, setup_file)

# Function to handle different installation modes (copy, make, script)
def handle_mode(mode, package, setup_file):
    if mode == "copy":
        copy_package_files(package)
    elif mode == "make":
        subprocess.run(["make", "-C", package], check=True)
    elif mode == "script":
        if not setup_file:
            print(f"No setup file specified for package {package}")
            return
        subprocess.run(["bash", f"{package}/{setup_file}"], check=True)
    else:
        print(f"Unknown mode {mode} for package {package}")

# Function to copy files from the cloned package
def copy_package_files(package):
    print(f"Copying files from {package}...")

    if not os.path.exists(package):
        print(f"Error: The directory {package} was not found after cloning.")
        return

    try:
        for item in os.listdir(package):
            s = os.path.join(package, item)
            d = os.path.join(".", item)
            if os.path.isdir(s):
                try:
                    shutil.copytree(s, d, dirs_exist_ok=True)
                except Exception as e:
                    print(f"Error copying directory {item}: {e}")
            else:
                if item in ["README.md", "LICENSE", "package.json"]:
                    print(f"Skipping {item}...")
                    continue
                try:
                    shutil.copy2(s, d)
                except Exception as e:
                    print(f"Error copying file {item}: {e}")
        print(f"Successfully installed {package}!")
    except Exception as e:
        print(f"Error copying files from {package}: {e}")

# Main function to parse the command-line arguments
def main():
    if len(sys.argv) < 3:
        print("Usage: kpkg.py <command> <package>")
        sys.exit(1)

    command = sys.argv[1]
    package = sys.argv[2]

    if command == "install":
        install_package(package)
    elif command == "gitinstall":
        install_package(package)
    elif command == "clone":
        clone(package)  # Here, package would be the URL
    else:
        print(f"Unknown command: {command}")
        sys.exit(1)

if __name__ == "__main__":
    main()
